CREATE TABLE MANGA (
	MANGA_ID NUMBER CONSTRAINT MANGA_PK PRIMARY KEY,
	TITLE_ENGLISH VARCHAR2(1000),
	TITLE_NATIVE VARCHAR2(1000),
	ISADULT VARCHAR2(1000),
	CHAPTERS NUMBER,
	VOLUMES NUMBER,
	STATUS VARCHAR2(1000),
-- 	DEMOGRAPHICS VARCHAR2(1000),
	START_DATE DATE,
	END_DATE DATE,
	SYNOPSIS VARCHAR2(4000),
	COUNTRY_OF_ORIGIN VARCHAR2(1000),
	BANNER_IMAGE VARCHAR2(1000),
	COVER_IMAGE VARCHAR2(1000),
	VISIT_COUNT NUMBER DEFAULT 0,
	LAST_VISIT DATE DEFAULT SYSDATE,
	CHECK(CHAPTERS>=0),
	CHECK(VOLUMES>=0),
	CHECK(END_DATE>=START_DATE OR END_DATE IS NULL),
	CHECK(VISIT_COUNT >= 0)
);

select * from fpt_log;
select * from manga;
select * from anime_x_manga;

alter table STUDIO drop column visit_count;
alter table PERSON add VISIT_COUNT NUMBER DEFAULT 0 CHECK(VISIT_COUNT >= 0);
ALTER TABLE PERSON ADD LAST_VISIT DATE DEFAULT SYSDATE;
-- ALTER TABLE STUDIO ADD VISIT_COUNT NUMBER CHECK(VISIT_COUNT>=0);
CREATE TABLE ANIME (
	ANIME_ID NUMBER CONSTRAINT ANIME_PK PRIMARY KEY,
	TITLE_ENGLISH VARCHAR2(1000),
	TITLE_NATIVE VARCHAR2(1000),
	isAdult VARCHAR2(1000),
	EPISODE_COUNT NUMBER CHECK(EPISODE_COUNT>0),
	TRAILER_LINK VARCHAR2(1000),
	STATUS VARCHAR2(1000),
	START_DATE DATE,
	END_DATE DATE,
	SYNOPSIS VARCHAR2(4000),
	COUNTRY_OF_ORIGIN VARCHAR2(1000),
	AVERAGE_EPISODE_DURATION NUMBER,
	BANNER_IMAGE VARCHAR2(1000),
	COVER_IMAGE VARCHAR2(1000),
	DEMOGRAPHICS VARCHAR2(1000),
	VISIT_COUNT NUMBER DEFAULT 0,
	LAST_VISIT DATE DEFAULT SYSDATE,
	CHECK(VISIT_COUNT>=0),
	CHECK(END_DATE>=START_DATE OR END_DATE IS NULL),
	CHECK(AVERAGE_EPISODE_DURATION>=0)
	--DEMOGRAPHICS VARCHAR2(1000)
	------------------------------------------------------
	--I THINK PREQUEL SEQUEL ANIME TABLE E FK HISHEBE RAKHA JABENA AS THEY CAN BE NULL
	--PREQUEL NUMBER REFERENCES ANIME(ANIME_ID),
	--SEQUEL NUMBER REFERENCES ANIME(ANIME_ID)
);
-- ALTER TABLE STUDIO MODIFY VISIT_COUNT DEFAULT 0;

CREATE TABLE ANIME_X_SEQUEL ( --NEWLY ADDED
	PARENT_ID NUMBER,
	CHILD_ID NUMBER,
	CONSTRAINT ANIME_X_SEQUEL_FK1 FOREIGN KEY(PARENT_ID) REFERENCES ANIME(ANIME_ID),
	CONSTRAINT ANIME_X_SEQUEL_FK2 FOREIGN KEY(CHILD_ID) REFERENCES ANIME(ANIME_ID),
	CONSTRAINT ANIME_X_SEQUEL_PK PRIMARY KEY (PARENT_ID, CHILD_ID)
);

CREATE TABLE ANIME_X_MANGA (
	ANIME_ID NUMBER,
	MANGA_ID NUMBER,
	CONSTRAINT ANIME_X_MANGA UNIQUE (ANIME_ID, MANGA_ID),
	CONSTRAINT ANIME_ID_FK_ANIME_X_MANGA FOREIGN KEY(ANIME_ID) REFERENCES ANIME(ANIME_ID) ON DELETE CASCADE,
	CONSTRAINT MANGA_ID_FK_ANIME_X_MANGA FOREIGN KEY (MANGA_ID) REFERENCES MANGA(MANGA_ID)ON DELETE CASCADE
);
SELECT * FROM ANIME;
SELECT * FROM MANGA;
SELECT * FROM ANIME_X_MANGA;
-- CREATE TABLE STUDIO_PRIMARY_ADDRESS (
-- 	ADDRESS_ID NUMBER CONSTRAINT SPA_PK PRIMARY KEY,
-- 	STREET VARCHAR2(1000),
-- 	POSTAL_CODE NUMBER,
-- 	CITY VARCHAR2(1000),
-- 	COUNTRY VARCHAR2(1000)
-- );

CREATE TABLE STUDIO (
	STUDIO_UID NUMBER CONSTRAINT S_PK PRIMARY KEY,
	NAME VARCHAR2(1000) NOT NULL,
	ESTABLISHED DATE,
	ABOUT CLOB,
	IMAGE_LINK VARCHAR2(4000),
	VISIT_COUNT NUMBER DEFAULT 0,
	CHECK (VISIT_COUNT >=0),
	--ADDRESS_ID NUMBER,
	--CONSTRAINT STUDIO_FK_STUDIO_PRIMARY_ADDRESS FOREIGN KEY (ADDRESS_ID) REFERENCES STUDIO_PRIMARY_ADDRESS(ADDRESS_ID)
);

-- ALTER TABLE STUDIO 
-- ADD CONSTRAINT STUDIO_NAME_NOT_NULL CHECK (NAME IS NOT NULL);

CREATE TABLE STUDIO_X_ANIME (
	STUDIO_UID NUMBER,
	ANIME_ID NUMBER,
	CONTRIBUTION VARCHAR2(1000),
	CONSTRAINT STUDIO_UID_FK_STUDIO_X_ANIME FOREIGN KEY (STUDIO_UID) REFERENCES STUDIO(STUDIO_UID) ON DELETE CASCADE,
	CONSTRAINT ANIME_ID_FK_STUDIO_X_ANIME FOREIGN KEY (ANIME_ID) REFERENCES ANIME(ANIME_ID) ON DELETE CASCADE,
	CONSTRAINT STUDIO_X_ANIME_PK PRIMARY KEY (STUDIO_UID, ANIME_ID, CONTRIBUTION)
);
ALTER TABLE STUDIO_X_ANIME DROP CONSTRAINT STUDIO_X_ANIME_PK;
ALTER TABLE STUDIO_X_ANIME ADD CONSTRAINT STUDIO_X_ANIME_PK PRIMARY KEY (STUDIO_UID, ANIME_ID, CONTRIBUTION);

CREATE TABLE ANIME_GENRE (
	GENRE_UID NUMBER CONSTRAINT G_PK PRIMARY KEY,
	TYPE_NAME VARCHAR2(1000),
	GENRE_DESCRIPTION CLOB
);

CREATE TABLE ANIME_X_GENRE (
	GENRE_UID NUMBER,
	ANIME_ID NUMBER,
	CONSTRAINT ANIME_ID_FK_ANIME_X_GENRE FOREIGN KEY (ANIME_ID) REFERENCES ANIME(ANIME_ID) ON DELETE CASCADE,
	CONSTRAINT GENRE_UID_FK_ANIME_X_GENRE FOREIGN KEY (GENRE_UID) REFERENCES ANIME_GENRE(GENRE_UID) ON DELETE CASCADE,
	CONSTRAINT ANIME_X_GENRE_PK PRIMARY KEY (GENRE_UID, ANIME_ID)
);

CREATE TABLE MANGA_GENRE (
	GENRE_UID NUMBER CONSTRAINT MG_PK PRIMARY KEY,
	TYPE_NAME VARCHAR2(1000),
	GENRE_DESCRIPTION CLOB
);

CREATE TABLE MANGA_X_GENRE (
	GENRE_UID NUMBER,
	MANGA_ID NUMBER,
	CONSTRAINT MANGA_ID_FK_MANGA_X_GENRE FOREIGN KEY (MANGA_ID) REFERENCES MANGA(MANGA_ID) ON DELETE CASCADE,
	CONSTRAINT GENRE_UID_FK_MANGA_X_GENRE FOREIGN KEY (GENRE_UID) REFERENCES MANGA_GENRE(GENRE_UID) ON DELETE CASCADE,
	CONSTRAINT MANGA_X_GENRE_PK PRIMARY KEY (GENRE_UID, MANGA_ID)
);

CREATE TABLE CHARACTERS ( --DON'T ADD ON DELETE CASCADE HERE AS IT SHOULDN'T BE GIVEN THE LEAD TO CONTROL ANIME, MANGA TABLES
	CHARACTER_UID NUMBER CONSTRAINT C_PK PRIMARY KEY,
	FIRST_NAME VARCHAR2(1000),
	LAST_NAME VARCHAR2(1000),
	ROLE_PLAY VARCHAR2(1000),
	RATING NUMBER (3,2),
	DESCRIPTION CLOB, --NEED TO UPDATE THIS
	IMAGE_LINK VARCHAR2(1000),
	VISIT_COUNT NUMBER DEFAULT 0,
	CHECK(VISIT_COUNT>=0)
);

CREATE TABLE CHARACTERS_X_ANIME (
	ANIME_ID NUMBER,
	CHARACTER_UID NUMBER,
	CONSTRAINT ANIME_ID_FK_CHARACTERS_X_ANIME FOREIGN KEY (ANIME_ID) REFERENCES ANIME(ANIME_ID), --THIS ON DELETE CASCADE MAY NEED TO BE REMOVED
	CONSTRAINT CHARACTER_UID_FK_CHARACTERS_X_ANIME FOREIGN KEY (CHARACTER_UID) REFERENCES CHARACTERS(CHARACTER_UID) ON DELETE CASCADE,
	CONSTRAINT CHARACTERS_X_ANIME_PK PRIMARY KEY (ANIME_ID, CHARACTER_UID)
);

-- ALTER TABLE CHARACTERS_X_MANGA ADD CONSTRAINT CHARACTERS_X_MANGA_PK PRIMARY KEY (MANGA_ID, CHARACTER_UID);
-- ALTER TABLE CHARACTERS_X_MANGA DROP CONSTRAINT MANGA_ID_FK_CHARACTERS_X_MANGA;
-- ALTER TABLE CHARACTERS_X_MANGA ADD CONSTRAINT MANGA_ID_FK_CHARACTERS_X_MANGA FOREIGN KEY (MANGA_ID) REFERENCES MANGA (MANGA_ID) ON DELETE CASCADE;
CREATE TABLE CHARACTERS_X_MANGA (
	MANGA_ID NUMBER,
	CHARACTER_UID NUMBER,
	CONSTRAINT MANGA_ID_FK_CHARACTERS_X_MANGA FOREIGN KEY (MANGA_ID) REFERENCES MANGA(MANGA_ID), --ON DELETE CASCADE,
	CONSTRAINT CHARACTER_UID_FK_CHARACTERS_X_MANGA FOREIGN KEY (CHARACTER_UID) REFERENCES CHARACTERS(CHARACTER_UID) ON DELETE CASCADE,
	CONSTRAINT CHARACTERS_X_MANGA_PK PRIMARY KEY (MANGA_ID, CHARACTER_UID)
);


CREATE TABLE PERSON (
	PERSON_UID NUMBER CONSTRAINT P_PK PRIMARY KEY,
	FIRST_NAME VARCHAR2(4000),
	LAST_NAME VARCHAR2(4000),
	GENDER VARCHAR2(4000),
	BIRTH_DAY DATE,
	ALIVE VARCHAR2(4000),
	IMAGE_LINK VARCHAR2(4000),
	VISIT_COUNT NUMBER DEFAULT 0,
	CHECK (VISIT_COUNT >= 0)
);


CREATE TABLE VOICE_ARTIST (
	PERSON_UID NUMBER,
	CHARACTER_UID NUMBER,
	LANGUAGE VARCHAR2(1000),
	CONSTRAINT P_FK3 FOREIGN KEY (PERSON_UID) REFERENCES PERSON(PERSON_UID) ON DELETE CASCADE,
	CONSTRAINT C_FK_VA FOREIGN KEY (CHARACTER_UID) REFERENCES CHARACTERS(CHARACTER_UID) ON DELETE CASCADE
);

CREATE TABLE STAFF_X_ANIME (
	ANIME_ID NUMBER,
	PERSON_UID NUMBER,
	CONTRIBUTION VARCHAR2(4000),
	CONSTRAINT A_FK2 FOREIGN KEY (ANIME_ID) REFERENCES ANIME(ANIME_ID) ON DELETE CASCADE,
	CONSTRAINT P_FK2 FOREIGN KEY (PERSON_UID) REFERENCES PERSON(PERSON_UID) ON DELETE CASCADE,
	CONSTRAINT STAFF_X_ANIME_PK PRIMARY KEY (ANIME_ID, PERSON_UID, CONTRIBUTION)
);

-- CREATE TABLE ANIME_STAFF_POSITIONS (
-- 	PERSON_UID NUMBER,
-- 	ANIME_ID NUMBER,
-- 	POSITION VARCHAR2(1000),
-- 	CONSTRAINT PERSON_UID_FK_ANIME_STAFF_POSITIONS FOREIGN KEY (PERSON_UID) REFERENCES STAFF_X_ANIME(PERSON_UID) ON DELETE CASCADE,
-- 	CONSTRAINT ANIME_ID_FK_ANIME_STAFF_POSITIONS FOREIGN KEY (ANIME_ID) REFERENCES STAFF_X_ANIME(ANIME_ID) ON DELETE CASCADE,
-- 	CONSTRAINT ANIME_STAFF_POSITIONS PRIMARY KEY (PERSON_UID, POSITION) --EKJON PERSON MULTIPLE POSITION E THAKTE PARE
-- );

CREATE TABLE AUTHOR_X_MANGA (
	MANGA_ID NUMBER,
	PERSON_UID NUMBER,
	CONSTRAINT PERSON_UID_FK_MANGA_AUTHOR FOREIGN KEY (PERSON_UID) REFERENCES PERSON(PERSON_UID) ON DELETE CASCADE,
	CONSTRAINT MANGA_ID_FK_MANGA_AUTHOR FOREIGN KEY (MANGA_ID) REFERENCES MANGA(MANGA_ID) ON DELETE CASCADE,
	CONSTRAINT MANGA_AUTHOR_PK PRIMARY KEY(MANGA_ID, PERSON_UID)
);
---USER RELATED TABLE FROM NOW:
CREATE TABLE USERS (
	USER_ID NUMBER CONSTRAINT USER_PK PRIMARY KEY,
	USERNAME VARCHAR2(1000) CONSTRAINT USERNAME_UNIQUE UNIQUE NOT NULL,
	PASSWORD VARCHAR2(1000) NOT NULL,
	PRIVILEGE VARCHAR2(1000) CONSTRAINT PRIVILEGE_NOT_NULL NOT NULL,
	REPUTATION VARCHAR2(1000),
	PROFILE_PICTURE VARCHAR2(1000),
	EMAIL VARCHAR2(1000) CONSTRAINT EMAIL_UNIQUE UNIQUE,
	NSFW NUMBER(1,0), --0->OFF, 1->ON
	ACCOUNT_STATUS NUMBER(1,0) DEFAULT 1,
	WARNING_LEVEL NUMBER DEFAULT 0,
	CHECK (LENGTH(PASSWORD >= 8)),
	CHECK(NSFW IN (0,1)),
	CHECK (ACCOUNT_STATUS IN (1, 2, 3, 4)) --1 FOR ACTIVE, 2 FOR INACTIVE, 3 FOR DELETED, 4 FOR BANNED --CONFUSING AS
); 
--ALTER TABLE USERS ADD WARNING_LEVEL NUMBER DEFAULT 0;

CREATE TABLE USERS_DELETED (
	USER_ID NUMBER CONSTRAINT USER_DELETED_PK PRIMARY KEY,
	USERNAME VARCHAR2(1000) CONSTRAINT USERNAME_UNIQUE_UD UNIQUE NOT NULL,
	PASSWORD VARCHAR2(1000) NOT NULL,
	PRIVILEGE VARCHAR2(1000) CONSTRAINT PRIVILEGE_NOT_NULL_UD NOT NULL,
	REPUTATION VARCHAR2(1000) DEFAULT 'Medium', --NOT CONFIGURED IN DB
	PROFILE_PICTURE VARCHAR2(1000),
	EMAIL VARCHAR2(1000) CONSTRAINT EMAIL_UNIQUE_UD UNIQUE,
	NSFW NUMBER(1,0), --0->OFF, 1->ON
	ACCOUNT_STATUS NUMBER(1,0) DEFAULT 1,
	CHECK (LENGTH(PASSWORD) >= 8),
	CHECK(NSFW IN (0,1)),
	CHECK (ACCOUNT_STATUS IN (1, 2, 3, 4)) --1 FOR ACTIVE, 2 FOR INACTIVE, 3 FOR DELETED, 4 FOR BANNED --CONFUSING AS
); 
-- ALTER TABLE USERS
-- ADD (NSFW NUMBER(1,0) DEFAULT 0 CONSTRAINT CHK_NSF_CONTENT_ENABLED CHECK(NSFW IN (0,1)));
-- ALTER TABLE USERS
-- ADD (ACCOUNT_STATUS NUMBER(1,0) DEFAULT 1 CHECK(ACCOUNT_STATUS IN (1,2,3,4)));
-- UPDATE USERS SET ACCOUNT_STATUS = 1;
-- UPDATE USERS SET NSFW_CONTENT_ENABLED = 0;
-- ALTER TABLE USERS
-- DROP COLUMN PROFILE_PICTURE;
-- ALTER TABLE USERS ADD PROFILE_PICTURE BLOB;

CREATE TABLE CHARACTER_RATING (
	USER_ID NUMBER,
	CHARACTER_UID NUMBER,
	RATING NUMBER,
	CONSTRAINT USER_ID_FK_CHARACTER_RATING FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE SET NULL,
	CONSTRAINT CHARACTER_UID_FK_CHARACTER_RATING FOREIGN KEY (CHARACTER_UID) REFERENCES CHARACTERS(CHARACTER_UID) ON DELETE CASCADE,
	CONSTRAINT CHARACTER_RATING_PK PRIMARY KEY (USER_ID, CHARACTER_UID)
);

CREATE TABLE USER_ANIME_REVIEWS (
	REVIEW_ID NUMBER CONSTRAINT USER_ANIME_REVIEWS_PK PRIMARY KEY,
	ANIME_ID NUMBER,
	USER_ID NUMBER,
	SCORE NUMBER, 
	VOTES NUMBER,----MIGHT GET REMOVED AFTER SOME WORKS
	SUMMARY CLOB,
	REVIEW CLOB,
	TIME DATE DEFAULT SYSDATE,
--
	CONSTRAINT ANIME_ID_FK_USER_ANIME_REVIEWS FOREIGN KEY (ANIME_ID) REFERENCES ANIME(ANIME_ID) ON DELETE CASCADE,
	CONSTRAINT USER_ID_FK_USER_ANIME_REVIEWS FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
	CONSTRAINT USER_ANIME_REVIEWS_UNIQUE UNIQUE (ANIME_ID, USER_ID)
);

CREATE TABLE USER_MANGA_REVIEWS (
	REVIEW_ID NUMBER CONSTRAINT USER_MANGA_REVIEWS_PK PRIMARY KEY,
	MANGA_ID NUMBER,
	USER_ID NUMBER,
	SCORE NUMBER,
	VOTES NUMBER,--MIGHT GET REMOVED AFTER SOME WORKS
	SUMMARY VARCHAR2(4000),
	REVIEW VARCHAR2(4000),
	TIME DATE DEFAULT SYSDATE,
	CONSTRAINT MANGA_ID_FK_USER_MANGA_REVIEWS FOREIGN KEY (MANGA_ID) REFERENCES MANGA(MANGA_ID)ON DELETE CASCADE,
	CONSTRAINT USER_ID_FK_USER_MANGA_REVIEWS FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
	CONSTRAINT USER_MANGA_REVIEWS_UNIQUE UNIQUE (MANGA_ID, USER_ID)
);
-- ALTER TABLE USER_MANGA_REVIEWS DROP COLUMN REVIEW;
-- ALTER TABLE USER_MANGA_REVIEWS ADD REVIEW VARCHAR2(4000);
-- ALTER TABLE USER_MANGA_REVIEWS ADD SUMMARY VARCHAR2(4000);
--ALTER TABLE USER_MANGA_REVIEWS ADD TIME DATE DEFAULT SYSDATE; --IF NO VALUE IS GIVEN OR EXISTS, IT'LL ADD SYSDATE

CREATE TABLE USER_ANIME_LIST (
	ANIME_ID NUMBER,
	USER_ID NUMBER,
	STATUS VARCHAR2(4000),
	CONSTRAINT ANIME_ID_FK_USER_ANIME_LIST FOREIGN KEY (ANIME_ID) REFERENCES ANIME(ANIME_ID) ON DELETE CASCADE,
	CONSTRAINT USER_ID_FK_USER_ANIME_LIST FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE,
	CONSTRAINT USER_ANIME_LIST_PK PRIMARY KEY (ANIME_ID, USER_ID),
	CHECK (STATUS = 1 OR STATUS = 2 OR STATUS = 3)
);

-- ALTER TABLE USER_MANGA_LIST ADD CHECK (STATUS = 1 OR STATUS = 2 OR STATUS = 3);

CREATE TABLE USER_MANGA_LIST (
	MANGA_ID NUMBER,
	USER_ID NUMBER,
	STATUS VARCHAR2(4000),
	CONSTRAINT MANGA_ID_FK_USER_MANGA_LIST FOREIGN KEY (MANGA_ID) REFERENCES MANGA(MANGA_ID) ON DELETE CASCADE,
	CONSTRAINT USER_ID_FK_USER_MANGA_LIST FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE,
	CONSTRAINT USER_MANGA_LIST_PK PRIMARY KEY (MANGA_ID, USER_ID),
	CHECK (STATUS = 1 OR STATUS = 2 OR STATUS = 3)
);

CREATE TABLE USER_ANIME_REVIEW_VOTES (
	REVIEW_ID NUMBER,
	USER_ID NUMBER,
	VOTE_TYPE VARCHAR2(4000),
	CONSTRAINT USER_ANIME_REVIEW_VOTES_PK PRIMARY KEY (REVIEW_ID, USER_ID),
	CONSTRAINT USER_ID_FK_USER_ANIME_REVIEW_VOTES FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
	CONSTRAINT REVIEW_ID_FK_USER_ANIME_REVIEW_VOTES FOREIGN KEY (REVIEW_ID) REFERENCES USER_ANIME_REVIEWS(REVIEW_ID) ON DELETE CASCADE
);
CREATE TABLE USER_MANGA_REVIEW_VOTES (
	REVIEW_ID NUMBER,
	USER_ID NUMBER,
	VOTE_TYPE VARCHAR2(4000),
	CONSTRAINT USER_MANGA_REVIEW_VOTES_PK PRIMARY KEY (REVIEW_ID, USER_ID),
	CONSTRAINT USER_ID_FK_USER_MANGA_REVIEW_VOTES FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
	CONSTRAINT REVIEW_ID_FK_USER_MANGA_REVIEW_VOTES FOREIGN KEY (REVIEW_ID) REFERENCES USER_MANGA_REVIEWS(REVIEW_ID) ON DELETE CASCADE
);

--USER ANIME AND MANGA VOTES ARE INCLUDED IN THE REVIEW, IG WE CAN CREATE A CHARACTER VOTE TABLE
CREATE TABLE USER_CHARACTER_REVIEWS(
);
---------------------------------------------------------আপাতত---------------------------------------------------------------

CREATE TABLE DISCUSSION (
	DISCUSSION_ID NUMBER CONSTRAINT DISCUSSION_PK PRIMARY KEY,
	--HASHTAG_ID NUMBER,
	USER_ID NUMBER CONSTRAINT USER_ID_NOT_NULL_FOR_POST NOT NULL,
	TITLE VARCHAR2(1000) CONSTRAINT TITLE_NOT_NULL_FOR_POST NOT NULL,
	DISCUSSION_POST_CONTENT VARCHAR2(4000),
	DATE_POSTED DATE,
	CONSTRAINT USER_ID_FK_DISCUSSION FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID)
	--CONSTRAINT HASHTAG_ID_FK_HASHTAGS FOREGIN KEY (HASHTAG_ID) REFERENCES HASHTAGS(HASHTAG_ID)
);

CREATE TABLE DISCUSSION_COMMENTS (
	COMMENT_ID NUMBER CONSTRAINT COMMENT_ID PRIMARY KEY,
	DISCUSSION_ID NUMBER NOT NULL,
	USER_ID NUMBER NOT NULL,
	COMMENT_CONTENT VARCHAR2(4000),
	DATE_POSTED DATE,
	PARENT_OF NUMBER UNIQUE,
	CONSTRAINT DISCUSSION_ID_FK_DISCUSSION_COMMENTS FOREIGN KEY (DISCUSSION_ID) REFERENCES DISCUSSION(DISCUSSION_ID) ON DELETE CASCADE,
	CONSTRAINT USER_ID_FK_DISCUSSION_COMMENTS FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID)
);

CREATE TABLE DISCUSSION_COMMENT_VOTES (
	COMMENT_ID NUMBER,
	USER_ID NUMBER,
	USER_VOTED VARCHAR2(1000),
	CONSTRAINT COMMENT_ID_FK_DISCUSSION_COMMENT_VOTED FOREIGN KEY (COMMENT_ID) REFERENCES DISCUSSION_COMMENTS(COMMENT_ID) ON DELETE CASCADE,
	CONSTRAINT USER_ID_FK_DISCUSSION_COMMENT_VOTED FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
	CONSTRAINT DISCUSSION_COMMENT_VOTES_PK PRIMARY KEY (COMMENT_ID, USER_ID)
);

--CREATE TABLE HASHTAGS (
--	HASHTAG_ID NUMBER CONSTRAINT HASHTAGS_PK PRIMARY KEY,
--	DISCUSSION_ID NUMBER
--)
CREATE TABLE FPT_LOG ( -- * means all elements were given as parameters through the query statement
	LOG_ID NUMBER,
	USER_ID NUMBER,
	TIME DATE,
	OPERATION_TYPE VARCHAR2(4000),
	OPERATION_NAME VARCHAR2(4000),
	QUERY_TYPE VARCHAR2(4000),
	STATUS VARCHAR2(4000),
	PARAMS VARCHAR2(4000)
);

CREATE OR REPLACE PROCEDURE FPT_LOG_INSERT (U_ID NUMBER, O_T VARCHAR2, O_N VARCHAR2, Q_T VARCHAR2, P VARCHAR2) IS
BEGIN
	INSERT INTO FPT_LOG(LOG_ID, USER_ID, TIME, OPERATION_TYPE, OPERATION_NAME, QUERY_TYPE, STATUS, PARAMS)
		VALUES (LOG_ID_SEQ.NEXTVAL, U_ID, SYSDATE, UPPER(O_T), UPPER(O_N), UPPER(Q_T), 'SUCCESS', P);
	INSERT INTO FPT_LOG(LOG_ID, USER_ID, TIME, OPERATION_TYPE, OPERATION_NAME, QUERY_TYPE, STATUS, PARAMS)
		VALUES (LOG_ID_SEQ.NEXTVAL, U_ID, SYSDATE, 'PROCEDURE', 'FPT_LOG_INSERT' , 'CALL', 'SUCCESS', U_ID || '<>' || O_T || '<>' || O_N || '<>' || Q_T || '<>' || P);
	COMMIT;
END;

select * from fpt_log;
CREATE SEQUENCE LOG_ID_SEQ INCREMENT BY 1 START WITH 1;

CREATE TABLE OFFENSIVE_TEXT ( --done
	TEXT VARCHAR2(4000) CONSTRAINT OFFENSIVE_WORDS_PK PRIMARY KEY,
	LANGUAGE VARCHAR2(4000),
	OFFENSE_LEVEL NUMBER--(1->LOW, 2->MODERATE, 3->ABSOLUTE, 4->BAN)
);

-- select * from offensive_text;
-- delete from OFFENSIVE_text;
-- DROP TABLE OFFENSIVE_WORDS_PHRASES PURGE;
-- DROP TABLE USER_QUERIES PURGE;

SELECT SYS_CONTEXT('USERENV','IP_ADDRESS') FROM dual;

--SEQUENCES
CREATE SEQUENCE REVIEW_SEQ START WITH 1000 INCREMENT BY 1;
alter sequence REVIEW_SEQ restart start with 20071;
CREATE SEQUENCE MANGA_REVIEW_SEQ START WITH 1000 INCREMENT BY 1;

CREATE SEQUENCE USER_ID_SEQ START WITH 4000 INCREMENT BY 1;
CREATE SEQUENCE ANIME_ID_SEQ START WITH 200000 INCREMENT BY 1;
CREATE SEQUENCE MANGA_ID_SEQ START WITH 200000 INCREMENT BY 1;
CREATE SEQUENCE CHARACTER_ID_SEQ START WITH 10000000 INCREMENT BY 1;
CREATE SEQUENCE ANIME_GENRE_UID_SEQ START WITH 500 INCREMENT BY 1;
CREATE SEQUENCE MANGA_GENRE_UID_SEQ START WITH 500 INCREMENT BY 1;
CREATE SEQUENCE STUDIO_UID_SEQ START WITH 5000 INCREMENT BY 1;
CREATE SEQUENCE PERSON_UID_SEQ START WITH 10000000 INCREMENT BY 1;

select * from characters where first_name = 'Anya';

--TRIGGERS
CREATE OR REPLACE TRIGGER CHARACTER_INSERT_RIGOROUS --NEEDS AN ARRAY REWORK WHERE I'D BE STORING THE DATA INTO AN ARRAY OR CREATING A VIEW
FOR INSERT
ON CHARACTERS
COMPOUND TRIGGER
	EXC EXCEPTION;
	PRAGMA EXCEPTION_INIT( EXC, -20001 );
	C NUMBER;
AFTER EACH ROW IS
BEGIN
	SELECT COUNT(*) INTO C FROM CHARACTERS WHERE (LOWER(FIRST_NAME) || ' ' || LOWER(LAST_NAME) LIKE LOWER(:OLD.FIRST_NAME) || ' ' || LOWER(:OLD.LAST_NAME));
	IF (C <> 0) THEN
		RAISE EXC;
	END IF;
END AFTER EACH ROW;
END CHARACTER_INSERT_RIGOROUS;
DROP TRIGGER CHARACTER_INSERT_RIGOROUS;

CREATE OR REPLACE TRIGGER USER_MANGA_REVIEW_ADD --WORKS
AFTER INSERT -- BRO CLOB ISSUE AGAIN?
ON USER_MANGA_REVIEWS
FOR EACH ROW
DECLARE
	TEMP NUMBER;
	TEMP2 NUMBER;
BEGIN
	TEMP:= OFFENSIVE_TEXT_CHECKER(:NEW.REVIEW);
	TEMP2:= OFFENSIVE_TEXT_CHECKER(:NEW.SUMMARY);
	IF TEMP < TEMP2 THEN 
		TEMP := TEMP2;
	END IF;
		IF (TEMP > 5) THEN
			UPDATE USERS SET WARNING_LEVEL = TEMP + WARNING_LEVEL WHERE USER_ID = :NEW.USER_ID AND LOWER(PRIVILEGE) NOT LIKE 'admin';
		END IF;
END;

CREATE OR REPLACE TRIGGER ANIME_GENRE_RIGOROUS_INSERT --WORKS;
FOR INSERT
ON ANIME_GENRE
COMPOUND TRIGGER
	TYPE GEN_NAME IS TABLE OF VARCHAR2(4000) INDEX BY VARCHAR2(4000);
	GENRE_NAME GEN_NAME := GEN_NAME();
	EXC EXCEPTION;
	PRAGMA EXCEPTION_INIT( EXC, -20001 );
BEFORE STATEMENT IS
BEGIN
	FOR R IN (SELECT GENRE_UID, TYPE_NAME FROM ANIME_GENRE)
		LOOP
			GENRE_NAME(R.GENRE_UID) := R.TYPE_NAME;
		END LOOP;
END BEFORE STATEMENT;
AFTER EACH ROW IS
	TEMP VARCHAR2(4000);
BEGIN
	TEMP := GENRE_NAME.FIRST;
	IF (:NEW.TYPE_NAME IS NULL) THEN
		RAISE EXC;
	END IF;
	WHILE (TEMP IS NOT NULL)
		LOOP
				IF (GENRE_NAME(TEMP) = :NEW.TYPE_NAME) THEN
					RAISE EXC;
				END IF;
				TEMP:= GENRE_NAME.NEXT(TEMP);
		END LOOP;
END AFTER EACH ROW;
END;
CREATE OR REPLACE TRIGGER MANGA_GENRE_RIGOROUS_INSERT
FOR INSERT
ON MANGA_GENRE
COMPOUND TRIGGER
	TYPE GEN_NAME IS TABLE OF VARCHAR2(4000) INDEX BY VARCHAR2(4000);
	GENRE_NAME GEN_NAME := GEN_NAME();
	EXC EXCEPTION;
	PRAGMA EXCEPTION_INIT( EXC, -20001 );
BEFORE STATEMENT IS
BEGIN
	FOR R IN (SELECT GENRE_UID, TYPE_NAME FROM MANGA_GENRE)
		LOOP
			GENRE_NAME(R.GENRE_UID) := R.TYPE_NAME;
		END LOOP;
END BEFORE STATEMENT;
AFTER EACH ROW IS
	TEMP VARCHAR2(4000);
BEGIN
	TEMP := GENRE_NAME.FIRST;
	IF (:NEW.TYPE_NAME IS NULL) THEN
		RAISE EXC;
	END IF;
	WHILE (TEMP IS NOT NULL)
		LOOP
				IF (GENRE_NAME(TEMP) = :NEW.TYPE_NAME) THEN
					RAISE EXC;
				END IF;
				TEMP:= GENRE_NAME.NEXT(TEMP);
		END LOOP;
END AFTER EACH ROW;
END;

CREATE OR REPLACE TRIGGER USER_DELETE --WORKS!!!!!
BEFORE UPDATE
OF ACCOUNT_STATUS
ON USERS
FOR EACH ROW
DECLARE
BEGIN
		IF(:NEW.ACCOUNT_STATUS = 3 OR :NEW.ACCOUNT_STATUS = 4 OR :NEW.WARNING_LEVEL > 100) THEN
			:NEW.PROFILE_PICTURE := NULL;
			:NEW.EMAIL := NULL;
			INSERT INTO USERS_DELETED VALUES(:OLD.USER_ID, :OLD.USERNAME, :OLD.PASSWORD, :OLD.PRIVILEGE, :OLD.REPUTATION, :OLD.PROFILE_PICTURE, :OLD.EMAIL, :OLD.NSFW, :NEW.ACCOUNT_STATUS);
		END IF;
END;

-- CREATE OR REPLACE TRIGGER ANIME_DELETE_LOGGER --works;
-- BEFORE DELETE
-- ON ANIME
-- FOR EACH ROW
-- DECLARE
-- BEGIN
-- 	INSERT INTO ANIME_DELETED VALUES (:OLD.ANIME_ID, :OLD.TITLE_ENGLISH, :OLD.TITLE_NATIVE, :OLD.ISADULT, :OLD.EPISODE_COUNT, :OLD.TRAILER_LINK,
-- 																		:OLD.STATUS, :OLD.START_DATE, :OLD.END_DATE, :OLD.SYNOPSIS, :OLD.COUNTRY_OF_ORIGIN, :OLD.AVERAGE_EPISODE_DURATION,
-- 																		:OLD.BANNER_IMAGE, :OLD.COVER_IMAGE, :OLD.DEMOGRAPHICS, :OLD.VISIT_COUNT, :OLD.LAST_VISIT);
-- END;

CREATE OR REPLACE TRIGGER ANIME_DELETE --WORKS!!!
BEFORE DELETE
ON ANIME
FOR EACH ROW
DECLARE
	TYPE CHARRAY IS TABLE OF NUMBER;
	CHARACTER_ARRAY CHARRAY := CHARRAY();
	I NUMBER := 1;
	TEMP NUMBER := 1;
	TEMP2 NUMBER := 1;
BEGIN
	FOR R IN (SELECT CHARACTER_UID FROM CHARACTERS_X_ANIME WHERE ANIME_ID = :OLD.ANIME_ID)
		LOOP
			CHARACTER_ARRAY.EXTEND();
			CHARACTER_ARRAY(I) := R.CHARACTER_UID;
			DELETE FROM CHARACTERS_X_ANIME WHERE CHARACTER_UID = R.CHARACTER_UID;
			I := I+1;
		END LOOP;
	FOR J IN 1..I-1 --NO SIMPLE SHIT TO COUNT ARRAY SIZE
		LOOP
			SELECT COUNT(*) INTO TEMP2 FROM CHARACTERS_X_MANGA WHERE CHARACTER_UID = CHARACTER_ARRAY(J);
			SELECT COUNT(*) INTO TEMP FROM CHARACTERS_X_ANIME WHERE CHARACTER_UID = CHARACTER_ARRAY(J);
			IF (TEMP = 0 AND TEMP2 = 0) THEN
				DELETE FROM CHARACTERS WHERE CHARACTER_UID = CHARACTER_ARRAY(J);
			END IF;
		END LOOP;
END;
-- 
-- SELECT *
-- FROM user_cons_columns
-- WHERE table_name = 'CHARACTERS_X_ANIME';

CREATE OR REPLACE TRIGGER MANGA_DELETE --CHARACTER TA TO ANIME ER SATHEO ASSIGNED THAKTE PARE --WORKS!!!!!!!
						-- SO JOIN KORE THEN TEMP = 1 CHECK PERFORM
BEFORE DELETE
ON MANGA
FOR EACH ROW
DECLARE
	TYPE CHARRAY IS TABLE OF NUMBER;
	CHARACTER_ARRAY CHARRAY := CHARRAY();
	I NUMBER:= 1;
	TEMP NUMBER := 1;
	TEMP2 NUMBER := 1;
BEGIN
	 FOR R IN (SELECT CHARACTER_UID FROM CHARACTERS_X_MANGA WHERE MANGA_ID = :OLD.MANGA_ID)
		LOOP
			CHARACTER_ARRAY.EXTEND();
			CHARACTER_ARRAY(I) := R.CHARACTER_UID;
			DELETE FROM CHARACTERS_X_MANGA WHERE CHARACTER_UID = R.CHARACTER_UID;
			I := I+1;
		END LOOP;
		FOR J IN 1..I-1
			LOOP
				SELECT COUNT(*) INTO TEMP FROM CHARACTERS_X_MANGA WHERE CHARACTER_UID = CHARACTER_ARRAY(J);
				SELECT COUNT(*) INTO TEMP2 FROM CHARACTERS_X_ANIME WHERE CHARACTER_UID = CHARACTER_ARRAY(J);
				IF (TEMP = 0 AND TEMP2 = 0) THEN
					DELETE FROM CHARACTERS WHERE CHARACTER_UID = CHARACTER_ARRAY(J);
				END IF;
			END LOOP;
END;

-- CREATE OR REPLACE PROCEDURE ADD_ANIME_OVER_MANGA (M_ID NUMBER, A_ID NUMBER) IS --bruh ektao kaj korena
--  --ADDING ANIME ON AN EXISTING MANGA, DIFFERENT FROM LINKING
-- BEGIN
-- 	INSERT INTO ANIME_X_MANGA VALUES (A_ID, M_ID);
-- 	FOR R IN (SELECT CHARACTER_UID FROM CHARACTERS_X_MANGA WHERE MANGA_ID = M_ID)
-- 		LOOP
-- 			INSERT INTO CHARACTERS_X_ANIME(ANIME_ID, CHARACTER_UID) VALUES (A_ID, R.CHARACTER_UID);
-- 		END LOOP;
-- END;
-- 
-- CREATE OR REPLACE PROCEDURE ADD_MANGA_OVER_ANIME (A_ID NUMBER, M_ID NUMBER) IS
-- --ADDING MANGA THROUGH EXISTING ANIME PAGE
-- BEGIN
-- 	INSERT INTO ANIME_X_MANGA VALUES (A_ID, M_ID);
-- 	FOR R IN (SELECT CHARACTER_UID FROM CHARACTERS_X_ANIME WHERE ANIME_ID = A_ID)
-- 		LOOP
-- 			INSERT INTO CHARACTERS_X_MANGA (MANGA_ID, CHARACTER_UID) VALUES (M_ID, R.CHARACTER_UID);
-- 		END LOOP;
-- 	COMMIT;
-- END;
-- 
-- CREATE OR REPLACE FUNCTION ADD_MANGA_OVER_ANIME_HELPER(A_ID NUMBER, M_ID NUMBER) RETURN NUMBER IS --PLSQL FUNC MUST RETURN 
-- BEGIN
-- 	ADD_MANGA_OVER_ANIME(A_ID, M_ID);
-- 	RETURN 0;
-- END;

CREATE OR REPLACE TRIGGER USER_ANIME_REVIEW_ADD --WORKS
AFTER INSERT -- BRO CLOB ISSUE AGAIN?
ON USER_ANIME_REVIEWS
FOR EACH ROW
DECLARE
	TEMP NUMBER;
	TEMP2 NUMBER;
BEGIN
	TEMP:= OFFENSIVE_TEXT_CHECKER(:NEW.REVIEW);
	TEMP2:= OFFENSIVE_TEXT_CHECKER(:NEW.SUMMARY);
	IF TEMP < TEMP2 THEN 
		TEMP := TEMP2;
	END IF;
		IF (TEMP > 5) THEN
			UPDATE USERS SET WARNING_LEVEL = TEMP + WARNING_LEVEL WHERE USER_ID = :NEW.USER_ID AND LOWER(PRIVILEGE) NOT LIKE 'admin';
		END IF;
END;

ALTER TABLE USER_ANIME_REVIEWS ADD REVIEW_M VARCHAR2(4000);
UPDATE USER_ANIME_REVIEWS SET REVIEW_M = SUBSTR(REVIEW, 1, 3910);
SELECT * FROM USER_ANIME_REVIEWS;
--REMEMBER THAT YOU ADDED A VARCHAR REVIEW_M FOR TEST PURPOSE

CREATE OR REPLACE TRIGGER TRENDING_ANIME_RESET --works
FOR UPDATE
OF VISIT_COUNT
ON ANIME
COMPOUND TRIGGER
A_ID NUMBER;
LAST_VISIT_DATE DATE;
AFTER EACH ROW IS
BEGIN
	A_ID := :NEW.ANIME_ID;
	LAST_VISIT_DATE := :NEW.LAST_VISIT;
END AFTER EACH ROW;
AFTER STATEMENT IS
BEGIN
	IF(SYSDATE - LAST_VISIT_DATE > 7) THEN
		UPDATE ANIME SET VISIT_COUNT = 0, LAST_VISIT = SYSDATE WHERE ANIME_ID = A_ID;
	END IF;
END AFTER STATEMENT;
END TRENDING_ANIME_RESET;

CREATE OR REPLACE TRIGGER TRENDING_MANGA_RESET --works
FOR UPDATE
OF VISIT_COUNT
ON MANGA
COMPOUND TRIGGER
	M_ID NUMBER;
	LAST_VISIT_DATE DATE;
AFTER EACH ROW IS
BEGIN
	M_ID := :NEW.MANGA_ID;
	LAST_VISIT_DATE := :NEW.LAST_VISIT;
END AFTER EACH ROW;
AFTER STATEMENT IS
BEGIN
	IF(SYSDATE - LAST_VISIT_DATE > 7) THEN
		UPDATE MANGA SET VISIT_COUNT = 0, LAST_VISIT = SYSDATE WHERE MANGA_ID = M_ID;
	END IF;
END AFTER STATEMENT;
END;

UPDATE ANIME SET LAST_VISIT = TO_DATE('1970-03-03', 'YYYY-MM-DD') WHERE ANIME_ID = 19;
SELECT SYSDATE- LAST_VISIT FROM ANIME;d
select trunc(sysdate) - to_date('2023-10-01', 'yyyy-mm-dd') from dual

--PROCEDURE

CREATE OR REPLACE PROCEDURE REPUTATION_SETTER(HIGH NUMBER, MEDIUM NUMBER) IS --user_id => reviews => review_votes 
--1k or more upvotes => high rep, 500>= med, else low
	NETVOTE_COUNT NUMBER:=0;
	TEMP NUMBER;
BEGIN
	FOR R IN (SELECT USER_ID FROM USERS)
	LOOP
		SELECT COUNT(*) INTO TEMP FROM USER_ANIME_REVIEWS UAR JOIN USER_ANIME_REVIEW_VOTES UARV ON UAR.REVIEW_ID = UARV.REVIEW_ID WHERE UAR.USER_ID = R.USER_ID;

		NETVOTE_COUNT := NETVOTE_COUNT + TEMP;
		SELECT COUNT(*) INTO TEMP FROM USER_ANIME_REVIEWS UAR JOIN USER_ANIME_REVIEW_VOTES UARV ON UAR.REVIEW_ID = UARV.REVIEW_ID WHERE UAR.USER_ID = R.USER_ID;

		NETVOTE_COUNT := NETVOTE_COUNT + TEMP;
		IF(NETVOTE_COUNT >= HIGH) THEN
			UPDATE USERS SET REPUTATION = 'High' WHERE USER_ID = R.USER_ID;
		ELSIF (NETVOTE_COUNT >= MEDIUM) THEN
			UPDATE USERS SET REPUTATION = 'Medium' WHERE USER_ID = R.USER_ID;
		ELSE
			UPDATE USERS SET REPUTATION = 'Low' WHERE USER_ID = R.USER_ID;
		END IF;
	END LOOP;
END;

CREATE OR REPLACE PROCEDURE STUDIO_ANIME_RELATION (S_ID NUMBER, A_ID NUMBER, CON VARCHAR2) IS --works
BEGIN
	IF(CON LIKE 'PRODUCTION' OR CON LIKE 'BOTH') THEN 
		INSERT INTO STUDIO_X_ANIME VALUES (S_ID, A_ID, 'PRODUCTION');
	END IF;
	IF(CON LIKE 'ANIMATION' OR CON LIKE 'BOTH') THEN 
		INSERT INTO STUDIO_X_ANIME VALUES (S_ID, A_ID, 'ANIMATION');
	END IF;
END;

CREATE OR REPLACE PROCEDURE USER_NSFW_STATUS_SET(STATUS NUMBER, U_ID NUMBER) IS --not added till now
BEGIN
	UPDATE USER SET NSFW = STATUS WHERE USER_ID = U_ID;
END;



-- CREATE OR REPLACE FUNCTION REPUTATION_POINTS(U_ID IN NUMBER) RETURN NUMBER IS --ADDED TO DB NEEDS REWORK, FROM REVIEWxVOTES TABLE
-- 	NETVOTE_COUNT NUMBER:=0;
-- 	TEMP NUMBER;
-- BEGIN
-- 	SELECT NVL(SUM(VOTES), 0) INTO TEMP FROM USER_ANIME_REVIEWS WHERE USER_ID = U_ID;
-- 	NETVOTE_COUNT := NETVOTE_COUNT + TEMP;
-- 	SELECT NVL(SUM(VOTES), 0) INTO TEMP FROM USER_MANGA_REVIEWS WHERE USER_ID = U_ID;
-- 	NETVOTE_COUNT := NETVOTE_COUNT + TEMP;
-- 	RETURN NETVOTE_COUNT;
-- END;
-- DROP FUNCTION REPUTATION_POINTS;


-- CREATE OR REPLACE PROCEDURE ANIME_REVIEW_VOTES_SETTER(R_ID IN NUMBER) IS --review_votes-> count-> update into reviews table;
-- 	COUNTER NUMBER:=0;
-- 	UP NUMBER;
-- 	DOWN NUMBER;
-- BEGIN
-- 	SELECT COUNT(*) INTO UP FROM USER_ANIME_REVIEW_VOTES WHERE VOTE_TYPE = 1; --UP
-- 	COUNTER := UP;
-- 	SELECT COUNT(*) INTO DOWN FROM USER_ANIME_REVIEW_VOTES WHERE VOTE_TYPE = 0; --DOWN
-- 	COUNTER := COUNTER - DOWN;
-- 	UPDATE USER_ANIME_REVIEWS SET VOTES = COUNTER WHERE REVIEW_ID = R_ID;
-- END;
-- 
-- CREATE OR REPLACE PROCEDURE MANGA_REVIEW_VOTES_SETTER(R_ID IN NUMBER) IS --review_votes-> count-> update into reviews table;
-- 	COUNTER NUMBER:=0;
-- 	UP NUMBER;
-- 	DOWN NUMBER;
-- BEGIN
-- 	SELECT COUNT(*) INTO UP FROM USER_ANIME_REVIEW_VOTES WHERE VOTE_TYPE = 1; --UP
-- 	COUNTER := UP;
-- 	SELECT COUNT(*) INTO DOWN FROM USER_ANIME_REVIEW_VOTES WHERE VOTE_TYPE = 0; --DOWN
-- 	COUNTER := COUNTER - DOWN;
-- 	UPDATE USER_MANGA_REVIEWS SET VOTES = COUNTER WHERE REVIEW_ID = R_ID;
-- END;
-- DROP PROCEDURE MANGA_REVIEW_VOTES_SETTER;

--FUNCTION
CREATE OR REPLACE FUNCTION GET_ANIME_AVG_RATING(A_ID NUMBER) RETURN NUMBER IS
	RATING NUMBER;
BEGIN
	SELECT SUM(SCORE) INTO RATING FROM USER_ANIME_REVIEWS WHERE ANIME_ID = A_ID AND USER_ID NOT IN (SELECT USER_ID FROM USERS WHERE ACCOUNT_STATUS = 4);
	RETURN NVL(RATING, 0);
END;
CREATE OR REPLACE FUNCTION GET_MANGA_AVG_RATING(M_ID NUMBER) RETURN NUMBER IS
	RATING NUMBER;
BEGIN
	SELECT SUM(SCORE) INTO RATING FROM USER_MANGA_REVIEWS WHERE MANGA_ID = M_ID AND USER_ID NOT IN (SELECT USER_ID FROM USERS WHERE ACCOUNT_STATUS = 4);
	RETURN NVL(RATING, 0);
END;

CREATE OR REPLACE FUNCTION GET_ALL_USERS_COUNT_WHO_EXISTED RETURN NUMBER IS
	TOTAL NUMBER:=0;
BEGIN
	WITH N AS (
		SELECT USER_ID FROM USERS
		UNION 
		SELECT USER_ID FROM USERS_DELETED
	)
	SELECT COUNT(*) INTO TOTAL
	FROM N;
	RETURN TOTAL;
END;

CREATE OR REPLACE FUNCTION GET_CHARACTER_RATING(C_ID NUMBER) RETURN NUMBER IS --ADDED
	AVG_R NUMBER;
BEGIN
	SELECT SUM(RATING) INTO AVG_R FROM CHARACTER_RATING CR WHERE CR.CHARACTER_UID = C_ID;
	RETURN AVG_R;
END;

CREATE OR REPLACE FUNCTION SHOULD_RECOMMEND_THIS_ANIME (A_ID NUMBER, U_ID NUMBER) RETURN NUMBER IS --ADDED
	ANSWER NUMBER:=0;
	TEMP NUMBER:=0;
BEGIN
	SELECT COUNT(*) INTO TEMP FROM USER_MANGA_LIST UML JOIN ANIME_X_MANGA AXM ON AXM.MANGA_ID= UML.MANGA_ID AND USER_ID = U_ID WHERE AXM.ANIME_ID = A_ID;
	IF (TEMP <> 0) THEN 
		RETURN 100;
	END IF;
	SELECT AVG(SIMILAR_GENRE_COUNTER(ANIME_ID, A_ID)) INTO ANSWER FROM USER_ANIME_LIST WHERE USER_ID = U_ID;
		RETURN ANSWER;
END;
CREATE OR REPLACE FUNCTION SHOULD_RECOMMEND_THIS_MANGA (M_ID NUMBER, U_ID NUMBER) RETURN NUMBER IS --ADDED
	ANSWER NUMBER:=0;
	TEMP NUMBER:=0;
BEGIN
	SELECT COUNT(*) INTO TEMP FROM USER_ANIME_LIST UML JOIN ANIME_X_MANGA AXM ON AXM.ANIME_ID= UML.ANIME_ID AND USER_ID = U_ID WHERE AXM.MANGA_ID = M_ID;
	IF (TEMP <> 0) THEN 
		RETURN 100;
	END IF;
	SELECT AVG(SIMILAR_GENRE_COUNTER_MANGA(MANGA_ID, M_ID)) INTO ANSWER FROM USER_MANGA_LIST WHERE USER_ID = U_ID;
		RETURN ANSWER;
END;
CREATE OR REPLACE FUNCTION SIMILAR_GENRE_COUNTER_MANGA(M1 NUMBER, M2 NUMBER) RETURN NUMBER IS
	COUNTER NUMBER:=0;
BEGIN
SELECT COUNT(*) INTO COUNTER FROM(
	SELECT GENRE_UID FROM MANGA_X_GENRE WHERE MANGA_ID = M1
	INTERSECT
	SELECT GENRE_UID FROM MANGA_X_GENRE WHERE MANGA_ID = M2
	);
	RETURN COUNTER;
END;


CREATE OR REPLACE FUNCTION GET_USER_ANIME_RATING(A_ID NUMBER, U_ID NUMBER) RETURN NUMBER IS --ADDED
	RATING NUMBER:=0;
BEGIN
	SELECT COUNT(*) INTO RATING FROM USER_ANIME_REVIEWS WHERE ANIME_ID = A_ID AND USER_ID = U_ID;
	IF(RATING = 0) THEN 
		RETURN 5;
	ELSE 
		SELECT SCORE INTO RATING FROM USER_ANIME_REVIEWS WHERE ANIME_ID = A_ID AND USER_ID = U_ID;
	END IF;
	RETURN RATING;
END;
-- 
-- SELECT GET_USER_ANIME_RATING(29, 3010) FROM DUAL;
select should_recommend_this_manga (manga_id, 3010) from manga;
select should_recommend_this_anime (1, 3002) from dual;

CREATE OR REPLACE FUNCTION UNION_GENRE_COUNTER (A1 NUMBER, A2 NUMBER) RETURN NUMBER IS --ADDED
	COUNTER NUMBER :=0;
BEGIN
SELECT COUNT(*) INTO COUNTER FROM(
	SELECT GENRE_UID FROM ANIME_X_GENRE WHERE ANIME_ID = A1
	UNION
	SELECT GENRE_UID FROM ANIME_X_GENRE WHERE ANIME_ID = A2
	);
	RETURN COUNTER;
END;

CREATE OR REPLACE FUNCTION SIMILAR_GENRE_COUNTER (A1 NUMBER, A2 NUMBER) RETURN NUMBER IS --ADDED
	COUNTER NUMBER:=0;
BEGIN
SELECT COUNT(*) INTO COUNTER FROM(
	SELECT GENRE_UID FROM ANIME_X_GENRE WHERE ANIME_ID = A1
	INTERSECT
	SELECT GENRE_UID FROM ANIME_X_GENRE WHERE ANIME_ID = A2
	);
	RETURN COUNTER;
END;

CREATE OR REPLACE FUNCTION REPUTATION_POINTS(U_ID NUMBER) RETURN NUMBER IS --WHY TF ITS RETURNING THE 0
	NETVOTE_COUNT NUMBER:=0;
	TEMP NUMBER:=0;
BEGIN
	SELECT COUNT(*) INTO TEMP FROM USER_ANIME_REVIEW_VOTES UARV JOIN USER_ANIME_REVIEWS UAR ON UAR.REVIEW_ID = UARV.REVIEW_ID WHERE UAR.USER_ID = U_ID AND UARV.VOTE_TYPE = 1;

	NETVOTE_COUNT := NETVOTE_COUNT + TEMP;
		SELECT COUNT(*) INTO TEMP FROM USER_ANIME_REVIEW_VOTES UARV JOIN USER_ANIME_REVIEWS UAR ON UAR.REVIEW_ID = UARV.REVIEW_ID WHERE UAR.USER_ID = U_ID AND UARV.VOTE_TYPE = 0;

	NETVOTE_COUNT := NETVOTE_COUNT - TEMP;
	SELECT COUNT(*) INTO TEMP FROM USER_MANGA_REVIEW_VOTES UARV JOIN USER_MANGA_REVIEWS UAR ON UAR.REVIEW_ID = UARV.REVIEW_ID WHERE UAR.USER_ID = U_ID AND UARV.VOTE_TYPE = 1;

	NETVOTE_COUNT := NETVOTE_COUNT + TEMP;
	SELECT COUNT(*) INTO TEMP FROM USER_MANGA_REVIEW_VOTES UARV JOIN USER_MANGA_REVIEWS UAR ON UAR.REVIEW_ID = UARV.REVIEW_ID WHERE UAR.USER_ID = U_ID AND UARV.VOTE_TYPE = 0;

	NETVOTE_COUNT := NETVOTE_COUNT - TEMP;
	RETURN NETVOTE_COUNT;
END;
SELECT COUNT(*) FROM USER_ANIME_REVIEW_VOTES UAR JOIN USER_ANIME_REVIEWS UARV ON UAR.REVIEW_ID = UARV.REVIEW_ID WHERE UAR.USER_ID = 3010;

CREATE OR REPLACE FUNCTION GET_VOTES (R_ID NUMBER) RETURN NUMBER IS --works
	NETVOTE_COUNT NUMBER:=0;
BEGIN
	SELECT COUNT(*) INTO NETVOTE_COUNT FROM USER_ANIME_REVIEW_VOTES WHERE REVIEW_ID = R_ID;
	RETURN NETVOTE_COUNT;
END;

CREATE OR REPLACE FUNCTION GET_MANGA_REVIEW_VOTES (R_ID NUMBER) RETURN NUMBER IS --ADDED 3/1/24
	NETVOTE_COUNT NUMBER:=0;
	TEMP NUMBER;
BEGIN
	SELECT COUNT(*) INTO NETVOTE_COUNT FROM USER_MANGA_REVIEW_VOTES WHERE REVIEW_ID = R_ID AND VOTE_TYPE = 1;
	SELECT COUNT(*) INTO TEMP FROM USER_MANGA_REVIEW_VOTES WHERE REVIEW_ID = R_ID AND VOTE_TYPE = 0;
	RETURN NETVOTE_COUNT - TEMP;
END;

--edit dist function log backend theke store krte hbe, function ta jehetu recursive so 
CREATE OR REPLACE FUNCTION EDIT_DISTANCE_MAIN(STR1 IN VARCHAR2, STR2 IN VARCHAR2) RETURN NUMBER IS --works
	TYPE ARR1 IS TABLE OF NUMBER;
	TYPE ARR2 IS TABLE OF ARR1;
	SIZE_1 NUMBER := NVL(LENGTH(STR1), 0);
	SIZE_2 NUMBER := NVL(LENGTH(STR2), 0);
	DP ARR2 := ARR2();
	PROCEDURE INIT_DP IS
		BEGIN
			FOR I IN 1..SIZE_1
			LOOP
			DP.EXTEND();
			DP(I) := ARR1();
				FOR J IN 1..SIZE_2
					LOOP
						DP(I).EXTEND();
						DP(I)(J) := -1;
					END LOOP;
			END LOOP;
		END;
		
	FUNCTION EDIT_DISTANCE(STR1 IN VARCHAR2, STR2 IN VARCHAR2, DP IN OUT ARR2) RETURN NUMBER IS
		L1 NUMBER:= NVL(LENGTH(STR1), 0);
		L2 NUMBER:= NVL(LENGTH(STR2), 0);
	BEGIN
		IF (L1 = 0) THEN
			RETURN L2;
		END IF;
		IF (L2 = 0) THEN
			RETURN L1;
		END IF;
		IF (DP(L1)(L2) <> -1) THEN
			RETURN DP(L1)(L2);
		END IF;
		IF (SUBSTR(STR1, L1, 1) = SUBSTR(STR2, L2, 1)) THEN
			DP(L1)(L2) := EDIT_DISTANCE(SUBSTR(STR1, 1, L1-1), SUBSTR(STR2, 1, L2-1), DP);
			RETURN DP(L1)(L2);
		END IF;
		DP(L1)(L2) := 1 + LEAST(EDIT_DISTANCE(STR1, SUBSTR(STR2, 1, L2-1), DP), EDIT_DISTANCE(SUBSTR(STR1, 1, L1-1), STR2, DP), EDIT_DISTANCE(SUBSTR(STR1, 1, L1-1), SUBSTR(STR2,1 , L2-1), DP));
		RETURN DP(L1)(L2);
	END;
BEGIN
	INIT_DP();
	RETURN EDIT_DISTANCE(STR1, STR2, DP);
END;

CREATE OR REPLACE FUNCTION RETURN_USERNAME(U_ID NUMBER) RETURN VARCHAR2 IS --works
	U_NAME VARCHAR2(4000);
BEGIN
	SELECT USERNAME INTO U_NAME FROM USERS WHERE USER_ID = U_ID;
	RETURN U_NAME;
END;

CREATE OR REPLACE FUNCTION ANIME_AVG_SCORE_COUNTER_TIME(START_DATE DATE, END_DATE DATE) RETURN NUMBER IS
	AVG_SCORE NUMBER;
BEGIN
	SELECT AVG(SCORE) INTO AVG_SCORE FROM USER_ANIME_REVIEWS WHERE TIME >= START_DATE AND TIME <= END_DATE;
	RETURN AVG_SCORE;
END;

CREATE OR REPLACE FUNCTION MANGA_AVG_SCORE_COUNTER_TIME(START_DATE DATE, END_DATE DATE) RETURN NUMBER IS
	AVG_SCORE NUMBER;
BEGIN
	SELECT AVG(SCORE) INTO AVG_SCORE FROM USER_MANGA_REVIEWS WHERE TIME>= START_DATE AND TIME <= END_DATE;
	RETURN AVG_SCORE;
END;

CREATE OR REPLACE FUNCTION USER_NSFW_STATUS(U_ID NUMBER) RETURN VARCHAR2 IS --works
	NSFW_STAT VARCHAR2(4000);
BEGIN
	SELECT NSFW INTO NSFW_STAT FROM USERS WHERE USER_ID = U_ID;
	IF NSFW_STAT = 0 THEN
		RETURN 'NO';
	ELSE 
		RETURN '%%';
	END IF;
END;
CREATE OR REPLACE FUNCTION LAST_SEQUEL_OF_ANIME(A_ID NUMBER) RETURN VARCHAR2 IS --didn't add
    S_ID VARCHAR2(4000) := TO_CHAR(A_ID); --CONSIDERING AT START THE SHOW DOESN'T HAVE ANY SEQUEL
    TEMP_C NUMBER;
BEGIN
    SELECT COUNT(*) INTO TEMP_C FROM ANIME_X_SEQUEL WHERE PARENT_ID = A_ID;
    IF TEMP_C = 0 THEN
        RETURN S_ID;
    ELSE
        FOR R IN (SELECT CHILD_ID FROM ANIME_X_SEQUEL WHERE PARENT_ID = A_ID) LOOP
            S_ID := S_ID || ' ' || TO_CHAR(R.CHILD_ID);
        END LOOP;
    END IF;
    RETURN S_ID;
END;

CREATE OR REPLACE FUNCTION LAST_SEQUEL_OF_MANGA(M_ID NUMBER) RETURN VARCHAR2 IS --NOT CREATED YET
    S_ID VARCHAR2(4000) := TO_CHAR(M_ID); --CONSIDERING AT START THE SHOW DOESN'T HAVE ANY SEQUEL
    TEMP_C NUMBER;
BEGIN
    SELECT COUNT(*) INTO TEMP_C FROM MANGA_X_SEQUEL WHERE PARENT_ID = M_ID;
    IF TEMP_C = 0 THEN
        RETURN S_ID;
    ELSE
        FOR R IN (SELECT CHILD_ID FROM MANGA_X_SEQUEL WHERE PARENT_ID = M_ID) LOOP
            S_ID := S_ID || ' ' || TO_CHAR(R.CHILD_ID);
        END LOOP;
    END IF;
    RETURN S_ID;
END;

CREATE OR REPLACE FUNCTION REMOVE_CONSECUTIVE_DUPLICATES(TEXT IN VARCHAR2) RETURN VARCHAR2 IS --works
    TEMP_STR VARCHAR2(4000) := '';
BEGIN
    IF TEXT IS NULL OR LENGTH(TEXT) = 0 THEN
        RETURN NULL;
    END IF;
    FOR I IN 1..LENGTH(TEXT)-1 
		LOOP
				IF SUBSTR(TEXT, I, 1) = ' 'OR SUBSTR(TEXT, I, 1) = '*' THEN
						CONTINUE;
				END IF;
        IF SUBSTR(TEXT, I, 1) = SUBSTR(TEXT, I+1, 1) THEN 
            CONTINUE; 
        ELSE 
            TEMP_STR := TEMP_STR || SUBSTR(TEXT, I, 1);
        END IF;
    END LOOP;

    TEMP_STR := TEMP_STR || SUBSTR(TEXT, LENGTH(TEXT), 1);
    
    RETURN TEMP_STR;
END;

CREATE OR REPLACE FUNCTION OFFENSIVE_TEXT_CHECKER(TEXT2 IN VARCHAR2) RETURN NUMBER IS --works
	TEMP_COUNT NUMBER :=0;
BEGIN
	IF TEXT2 IS NULL THEN
		RETURN 0;
	END IF;
	SELECT ROUND(AVG(OFFENSE_LEVEL)*COUNT(*), 1) INTO TEMP_COUNT FROM OFFENSIVE_TEXT WHERE INSTR(LOWER(REMOVE_CONSECUTIVE_DUPLICATES(TEXT2)), REMOVE_CONSECUTIVE_DUPLICATES(TEXT)) <> 0
																														OR INSTR(REMOVE_CONSECUTIVE_DUPLICATES(TEXT), LOWER(REMOVE_CONSECUTIVE_DUPLICATES(TEXT2))) <> 0;
	RETURN NVL(TEMP_COUNT, 0);
END;

SELECT OFFENSIVE_TEXT_CHECKER(' ') FROM DUAL;
SELECT REMOVE_CONSECUTIVE_DUPLICATES('HELL') FROM DUAL;

CREATE OR REPLACE FUNCTION GET_ANIME_REVIEW_VOTES (R_ID NUMBER) RETURN NUMBER IS
	NETVOTE_COUNT NUMBER:=0;
	TEMP NUMBER;
BEGIN
	SELECT COUNT(*) INTO NETVOTE_COUNT FROM USER_ANIME_REVIEW_VOTES WHERE REVIEW_ID = R_ID AND VOTE_TYPE = 1;
	SELECT COUNT(*) INTO TEMP FROM USER_ANIME_REVIEW_VOTES WHERE REVIEW_ID = R_ID AND VOTE_TYPE = 0;
	RETURN NETVOTE_COUNT - TEMP;
END;